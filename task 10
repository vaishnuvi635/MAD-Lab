Step 1: Testing and Final Code Review
Before building the release version, it&#39;s crucial to ensure the app is stable and the code
is clean.
1. Test on a Physical Device: Run the app on a real Android phone to catch issues that
may not appear on an emulator.
To test your Flutter app on a real Android phone, first enable debugging and then connect
it.
1. Enable Developer Mode (One-time setup):
• Go to Settings &gt; About phone and tap Build number 7 times.
• Go back to Settings &gt; System &gt; Developer options and turn on USB debugging.
2. Choose a Connection Method:
• Via USB Cable:
• Connect your phone to your PC with a USB cable.
• On your phone, tap Allow on the &quot;Allow USB debugging?&quot; prompt.
• Via Wi-Fi (Android 11+):
• Go to Developer options &gt; Wireless debugging.
• Select Pair device with pairing code or qr scan.

3. Verify Connection:
• In your computer&#39;s terminal, run flutter devices. Your phone should be listed as a
connected device.
2. Analyse Your Code: Use Flutter&#39;s built-in analysis tool to check for potential errors
and style warnings. Open a terminal in the project root and run:
flutter analyze
3. Fix any reported issues before proceeding.
Step 2: Add an App Icon and Update the Name
Production apps need a unique identity.

1. App Icon: Replace the default Flutter icon with your own. The res folder for icons can
be generated using the HYPERLINK
&quot;https://romannurik.github.io/AndroidAssetStudio/icons-launcher.html&quot;Android
Asset Studio. Merge the generated res folder with your project&#39;s
android/app/src/main/res directory.
2. App Name: Change the name that appears on the user&#39;s home screen by opening
android/app/src/main/AndroidManifest.xml and editing the android:label attribute:

Step 3: Create a Signing Key
A private key is needed to sign the app, proving your ownership. This key must be kept
safe.
Generate a Keystore: Open a terminal and run the keytool command to create a keystore
file (.jks) that contains your private key. You will be asked to create a password.
keytool -genkey -v -keystore my-app-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-app-alias
After running, move the generated my-app-key.jks file into the android/app directory of
your project.
Store Key Properties: Create a new file named android/key.properties. This file
securely stores your passwords. Add the following content, replacing the placeholders:

Properties
storePassword=your_keystore_password
keyPassword=your_key_alias_password
keyAlias=my-app-alias
storeFile=my-app-key.jks
Secure Your Key: Open the .gitignore file in your project&#39;s root and add the following
lines to prevent committing your key to version control:
/android/key.properties
/android/app/*.jks
Step 4: Configure Gradle for Signing
Tell the Android build process (Gradle) to use your key for release builds.
• Open the file android/app/build.gradle.
Add the following code to the top of the file:
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file(&#39;key.properties&#39;)
if (keystorePropertiesFile.exists()) {
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
• Inside the android { ... } block, add a signingConfigs section and update the
release build type to use it:
android {
// ...
signingConfigs {
release {
if (keystoreProperties.getProperty(&#39;storeFile&#39;) != null) {
storeFile file(keystoreProperties.getProperty(&#39;storeFile&#39;))
storePassword keystoreProperties.getProperty(&#39;storePassword&#39;)
keyAlias keystoreProperties.getProperty(&#39;keyAlias&#39;)
keyPassword keystoreProperties.getProperty(&#39;keyPassword&#39;)
}

}
}
buildTypes {
release {
// You may have other properties here
signingConfig signingConfigs.release
}
}

Step 5: Build the Release App
You are now ready to build the final, signed app files.
Build an App Bundle (Recommended): This creates an .aab file, the modern format
required by the Google Play Store.
flutter build appbundle --release
The output will be located at build/app/outputs/bundle/release/app-release.aab.
Build an APK: This creates a single .apk file that can be directly installed on devices.
flutter build apk --release
The output will be located at build/app/outputs/flutter-apk/app-release.apk.
